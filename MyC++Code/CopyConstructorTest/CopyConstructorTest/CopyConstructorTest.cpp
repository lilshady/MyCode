#include <iostream>

class Base
{
public:
	Base()
	{
		std::cout<<"this is from Base default Constructor"<<std::endl;
	}
	Base(const Base& temp)
	{   
	    std::cout<<"this is from Base CopyConstructor"<<std::endl;
	}
private:
};

class Object
{
public:
	Object()
	{
		std::cout<<"this is from Object default Constructor"<<std::endl;
	}
	Object(const Object& temp)
	{   
		std::cout<<"this is from Object CopyConstructor"<<std::endl;
	}
private:
	
};
class Derived:public Base
{
public:

	Derived()
	{
		std::cout<<"from derived ctor"<<std::endl;
	}

	/*
	Derived(const Derived&)
	{
		std::cout<<"from derived copy"<<std::endl;
	}
	*/
private:
	Object o;
};

int main()
{   
	/************************************************************************/
	/*Derived has no default constructor and copy constructor,so Derived d contributes
	/ to first two lines generated by compiler.
	/ Derived d2(d)contributes to last two lines .
	/如果类没有显式的默认构造函数，则编译器会在4种情况下为其生成。如果有，则会在其插入其基类或者
	/其所含对象的构造函数
	/如果类没有copy构造函数，且不表现出bitewise的语义，则编译器会为其生成调用其基类或者其所含对象
	/的copy构造函数。如果是Bitewise语义。则只是简单的位复制，不生产copy构造函数。
	/如果类有自己的copy构造函数，则会通过插入基类和所含对象的“默认构造函数”来扩充这个copy构造函数
	/************************************************************************/
 	Derived d;
	std::cout<<"....................."<<std::endl;
	Derived d2(d);
	system("pause");
}